<?php
declare(strict_types=1);

namespace Butschster\Kraken\Contracts;

use Brick\Math\BigDecimal;
use Butschster\Kraken\ValueObjects\CloseOrder;
use Butschster\Kraken\ValueObjects\OrderDirection;
use Butschster\Kraken\ValueObjects\OrderType;
use Illuminate\Contracts\Support\Arrayable;

interface AddOrderRequest extends Arrayable
{
    const FCIB = 'fcib'; // prefer fee in base currency
    const FCIQ = 'fciq'; // prefer fee in quote currency
    const NOMPP = 'nompp'; // no market price protection
    const POST = 'post'; // post only order (available when ordertype = limit)

    /**
     * User reference id
     * It is an optional user-specified integer id that can be associated with any number of orders.
     * Many clients choose a userref corresponding to a unique integer id generated by their systems (e.g. a timestamp).
     * However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair,
     * side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular
     * group, with fewer API calls by using userref instead of our txid, where supported.
     */
    public function userRef(): ?int;

    /**
     * Order type
     */
    public function orderType(): OrderType;

    /**
     * Order direction (buy/sell)
     */
    public function direction(): OrderDirection;

    /**
     * Order quantity in terms of the base asset
     * Note: Volume can be specified as 0 for closing margin orders to automatically fill the requisite quantity.
     */
    public function volume(): ?BigDecimal;

    /**
     * Asset pair id or altname
     */
    public function pair(): string;

    /**
     * Price
     * - Limit price for limit orders
     * - Trigger price for stop-loss, stop-loss-limit, take-profit and take-profit-limit orders
     */
    public function price(): ?string;

    /**
     * Conditional close
     * @return CloseOrder|null
     */
    public function close(): ?CloseOrder;

    /**
     * Secondary Price
     * - Limit price for stop-loss-limit and take-profit-limit orders
     *
     * Note: Either price or price2 can be preceded by +, -, or # to specify the order price as an offset relative to
     * the last traded price. + adds the amount to, and - subtracts the amount from the last traded price.
     * # will either add or subtract the amount to the last traded price, depending on the direction and order type used.
     * Relative prices can be suffixed with a % to signify the relative amount as a percentage.
     */
    public function secondaryPrice(): ?string;

    /**
     * Amount of leverage desired (default = none)
     */
    public function leverage(): ?string;

    /**
     * List of order flags
     *  - post post-only order (available when ordertype = limit)
     *  - fcib prefer fee in base currency (default if selling)
     *  - fciq prefer fee in quote currency (default if buying, mutually exclusive with fcib)
     *  - nompp disable market price protection for market orders
     */
    public function flags(): ?array;

    /**
     * Scheduled start time. Can be specified as an absolute timestamp or as a number of seconds in the future.
     * @return int|null
     */
    public function startAt(): ?int;

    /**
     * Expiration time
     * @return int|null
     */
    public function expiresAt(): ?int;

    /**
     * Agreement required for residents of Germany
     * @return bool
     */
    public function isTradingAgreed(): bool;

    /**
     * Validate inputs only. Do not submit order.
     * @return bool
     */
    public function isOnlyValidate(): bool;
}